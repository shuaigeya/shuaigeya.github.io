{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/29/redis%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "url": "http://example.com/2022/06/29/redis%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "title": "redis基础篇",
            "date_published": "2022-06-29T08:12:54.000Z",
            "content_html": "<p>redis 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkaXMubmV0LmNuL3R1dG9yaWFsLzM1MDIuaHRtbA==\">请戳此</span></p>\n<h2 id=\"nosql-简介\"><a class=\"markdownIt-Anchor\" href=\"#nosql-简介\">#</a> NoSql 简介</h2>\n<h3 id=\"什么是关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#什么是关系型数据库\">#</a> 什么是关系型数据库</h3>\n<p>依赖关系模型而创建的数据库就是关系型数据库。关系模型就是 一对一，一对多，多对多这些模型。</p>\n<h3 id=\"关系型数据库遵循-acip原则\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库遵循-acip原则\">#</a> 关系型数据库遵循 ACIP 原则</h3>\n<ol>\n<li>A (Atomicity) 原子性：原子不可再分。在一次事务操作中，所有的操作要么全部成功，要么全部失败。</li>\n<li>C (Consistency) 一致性：事务的运行不会改变数据库原有的一致性约束。在一次购物操作前后，a+b 的账户余额是不变的。</li>\n<li>I (Isolation) 独立性：一个事务的操作不会影响到另一个事务的执行。</li>\n<li>D (Durability) 持久性：事务操作一旦提交，就永远保存在数据库中。</li>\n</ol>\n<h2 id=\"redis-简介\"><a class=\"markdownIt-Anchor\" href=\"#redis-简介\">#</a> Redis 简介</h2>\n<h3 id=\"什么是redis\"><a class=\"markdownIt-Anchor\" href=\"#什么是redis\">#</a> 什么是 Redis?</h3>\n<p>Redis 是目前运用较广的一款关系型数据库，遵守 BSD 协议，是一个高性能的 key-value 数据库。<br>\nredis 的特点有：</p>\n<ol>\n<li>不仅仅支持 key-value 数据格式，还支持 list，set，zset，hash 等数据结构</li>\n<li>支持数据的持久化，可以把内存中的数据保存在磁盘中。重启后可以继续使用。</li>\n<li>支持数据备份。</li>\n</ol>\n",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "http://example.com/2022/06/29/myBatis-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2022/06/29/myBatis-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "myBatis 面试题",
            "date_published": "2022-06-29T04:27:11.000Z",
            "content_html": "<p>Mybatis 中文网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLm5ldC5jbi8=\">请戳此</span></p>\n<h2 id=\"mybatis-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mybatis-缓存\">#</a> MyBatis 缓存</h2>\n<p><strong>缓存</strong>：暂存一些数据，加快系统查询速度。</p>\n<p><strong>Mybatis 缓存机制</strong>：本质是一个<strong> Map</strong>, 能保存一些数据。</p>\n<p><strong>一级缓存</strong>：线程级别的缓存。也称本地缓存或<strong> sqlSession</strong> 级别的缓存。（和数据库的一次会话就有一次一级缓存）</p>\n<p><strong>二级缓存</strong>：全局范围的缓存。（除了当前线程和<strong> SqlSession</strong> 能用外，其他的都能用）</p>\n<h3 id=\"一级缓存\"><a class=\"markdownIt-Anchor\" href=\"#一级缓存\">#</a> 一级缓存</h3>\n<p>只要之前查询过的数据，<strong>MyBatis</strong> 都会保存在缓存中，下次获取这些数据，都会直接在缓存中拿。</p>\n<blockquote>\n<p>注：<strong>SpringBoot + Mybatis 一级缓存会失效</strong>。原因是经过 Spring 的处理，每次查询完成后，都会关闭<strong> sqlSession</strong>，而一级缓存是<strong> sqlSession</strong> 级别的缓存。</p>\n</blockquote>\n<h4 id=\"缓存失效的几种情况\"><a class=\"markdownIt-Anchor\" href=\"#缓存失效的几种情况\">#</a> 缓存失效的几种情况</h4>\n<ol>\n<li>不同的 <strong>sqlSession</strong> ，同一级的缓存。</li>\n<li>同一个方法，不同的参数。</li>\n<li>在同一个<strong> sqlSession</strong> 期间执行过任何一次增删改操作。</li>\n<li>手动清空了缓存。</li>\n</ol>\n<h3 id=\"二级缓存\"><a class=\"markdownIt-Anchor\" href=\"#二级缓存\">#</a> 二级缓存</h3>\n<blockquote>\n<p>二级缓存没有，就去看一级缓存，一级缓存没有，就去读数据库。<br>\n关闭 <strong>sqlSession</strong> 会把一级缓存数据放在二级缓存中。</p>\n</blockquote>\n<h2 id=\"mybatis-动态标签\"><a class=\"markdownIt-Anchor\" href=\"#mybatis-动态标签\">#</a> MyBatis 动态标签</h2>\n<blockquote>\n<p><strong>if、where、trim、set、foreach、collection、choose、sql、include、bing</strong></p>\n</blockquote>\n<h3 id=\"if-类似java中单分支-if-判断\"><a class=\"markdownIt-Anchor\" href=\"#if-类似java中单分支-if-判断\">#</a> if : 类似 java 中单分支  if  判断</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">*</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\ttbl_navigation a</span><br><span class=\"line\">WHERE</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.navigationId!=null and obj.navigationId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    a.column_type = #&#123;obj.navigationId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.id!=null and obj.id!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    a.column_type = #&#123;obj.id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"choose-when-otherwise\"><a class=\"markdownIt-Anchor\" href=\"#choose-when-otherwise\">#</a> choose、when、otherwise</h3>\n<blockquote>\n<p><strong>类似 Java 的 if-else。</strong><br>\n1. 当 title 不为空， 选择 title。<br>\n2. 当 content 不为空，title 为空，选择 content 。<br>\n3. 当 content 和 title 都为空，选择 otherwise。<br>\n4. 当 content 和 title 都为不为空，选择 title。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tbl_column</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">choose</span> &gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.title != null&quot;</span>&gt;</span></span><br><span class=\"line\">                 and title like #&#123;obj.title&#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;content != null&quot;</span>&gt;</span></span><br><span class=\"line\">                 and content like #&#123;obj.content&#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">                 and delete = 1</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"trim-where-set\"><a class=\"markdownIt-Anchor\" href=\"#trim-where-set\">#</a> trim、where、set</h3>\n<blockquote>\n<p><strong>where</strong>: 替换 sql 语句中的 where。只有当子元素有任何返回的情况，才会拼接 where。当子元素 以 or 或 and 开头 会去除。<br>\n<strong>trim</strong>: 可以去除 or 和 and，在语句中拼接前缀或后缀。<br>\n<strong>set</strong>: 替换 sql 语句中的 set。动态在行首添加 set 删除子元素首行逗号。</p>\n</blockquote>\n<h3 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"#foreach\">#</a> foreach</h3>\n<blockquote>\n<p>类似 java 中的 foreach。<br>\n<strong>collection：collection</strong> 集合，可以为 List,Set,Map。<br>\n<strong>item</strong>： 每次遍历，index 对应的 对象。<br>\n<strong>index</strong>： 当前数组的下标<br>\n<strong> open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</strong> ：循环开始前加 ‘(’，循环结束后加 ‘)’。循环过程中，每次循环结束后加，。</p>\n</blockquote>\n<p>以下为官网案例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectPostIn&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class=\"line\">  SELECT *</span><br><span class=\"line\">  FROM POST P</span><br><span class=\"line\">  WHERE ID in</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;item&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n",
            "tags": [
                "mybatis"
            ]
        },
        {
            "id": "http://example.com/2022/06/29/shoka%20%E9%A3%9F%E7%94%A8%E6%89%8B%E5%86%8C/",
            "url": "http://example.com/2022/06/29/shoka%20%E9%A3%9F%E7%94%A8%E6%89%8B%E5%86%8C/",
            "title": "shoka 食用手册",
            "date_published": "2022-06-29T02:52:07.047Z",
            "content_html": "<h2 id=\"shoka-主题安装和配置\"><a class=\"markdownIt-Anchor\" href=\"#shoka-主题安装和配置\">#</a> shoka 主题安装和配置</h2>\n<p>shok 主题安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">请戳此</span><br>\n shoka 依赖插件的安装和配置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">请戳此</span><br>\n shoka 主题基本配置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">请戳此</span><br>\n shoka 界面显示相关配置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">请戳此</span></p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "http://example.com/2022/06/28/java%E5%9F%BA%E7%A1%80%E7%AF%87%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2022/06/28/java%E5%9F%BA%E7%A1%80%E7%AF%87%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "java基础篇面试题",
            "date_published": "2022-06-28T08:09:11.000Z",
            "content_html": "<h2 id=\"1面向对象的特征\"><a class=\"markdownIt-Anchor\" href=\"#1面向对象的特征\">#</a> 1. 面向对象的特征</h2>\n<p><strong>继承，封装，多态。</strong><br>\n<strong>封装</strong>：将对象的实现细节隐藏起来，然后通过公共方法暴露出该对象的功能。<br>\n<strong>继承</strong>：实现软件复用。子类继承父类后可以直接或间接地使用父类的成员。<br>\n<strong>多态</strong>：同一个行为具有不同的表现形式。</p>\n<h2 id=\"2java中覆盖和重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#2java中覆盖和重载的区别\">#</a> 2.JAVA 中覆盖和重载的区别</h2>\n<p><strong>覆盖</strong>：子类对父类方法的一种重写。返回值，方法名，参数列表必须相同。访问权限大于等于父类。抛出的异常要小于父类<br>\n<strong>重载</strong>：在一个类中可以有多个重名的方法，根据 参数个数不同，参数类型不同，参数顺序不同  而构成重载。</p>\n<h2 id=\"3抽象类和接口的区别\"><a class=\"markdownIt-Anchor\" href=\"#3抽象类和接口的区别\">#</a> 3. 抽象类和接口的区别</h2>\n<p>1 .  抽象类可以没有抽象方法，但接口中的方法必须是抽象的。<br>\n2 . 抽象类只能被一个类继承，而接口可以继承多个父接口。<br>\n3 . 抽象类可以有普通成员变量，但 接口中的变量必须被初始化，接口中只有常量没有变量。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/47fb42cf20bd4883a3e1222f2bf6eae8.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>怎么选择接口和抽象类：如果要创建一个不带任何方法和成员变量的基类则选择接口，否则选择抽象类。</p>\n<h2 id=\"4java中常用的包\"><a class=\"markdownIt-Anchor\" href=\"#4java中常用的包\">#</a> 4.Java 中常用的包</h2>\n<p>Java.lang  java.util  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuaW8=\">java.io</span>  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuaW8=\">java.io</span>  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEubmV0\">java.net</span>  java.sql</p>\n<h2 id=\"5java-是值传递还是引用传递\"><a class=\"markdownIt-Anchor\" href=\"#5java-是值传递还是引用传递\">#</a> 5.Java 是值传递还是引用传递？</h2>\n<p>Java 是值传递的，当我们调用需要传参的函数时，传递过去的参数是它的副本而不是它本身<br>\n<img data-src=\"https://img-blog.csdnimg.cn/b9f8506f3bcd4c168d64ef20c602da87.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"6static-关键字的含义\"><a class=\"markdownIt-Anchor\" href=\"#6static-关键字的含义\">#</a> 6.static 关键字的含义？</h2>\n<p>被 static 修饰的成员变量或方法可以直接通过类名调用。静态块在编译时被调用。</p>\n<h2 id=\"7i和i的不同之处\"><a class=\"markdownIt-Anchor\" href=\"#7i和i的不同之处\">#</a> 7.i<ins> 和</ins> i 的不同之处？</h2>\n<p>两者在运算之前都会把变量值 + 1.<br>\n 后置 ++ 会将变量赋值给一个临时变量，接下来对临时变量 + 1，然后用临时变量进行运算。</p>\n<h2 id=\"8truefalse-与-null是关键字吗\"><a class=\"markdownIt-Anchor\" href=\"#8truefalse-与-null是关键字吗\">#</a> 8.true，false 与 null 是关键字吗？</h2>\n<p>true false 是布尔类型的字面常量，null 是引用类型的字面常量。</p>\n<h2 id=\"9java内存分布\"><a class=\"markdownIt-Anchor\" href=\"#9java内存分布\">#</a> 9.Java 内存分布</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/66b3b7ba39a94249957f043224b6bbd2.jpeg#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>栈</strong>：一般存基础数据类型的值和对象以及基础数据类型的引用<br>\n<strong>堆</strong>：存储创建好的对象和数组，jvm 只有一个堆，被所有的线程共享<br>\n<strong>方法区</strong>：jvm 只有一个方法区，被所有线程共享。用于存储常量和存储类。</p>\n<h2 id=\"10java反射的实现过程和作用\"><a class=\"markdownIt-Anchor\" href=\"#10java反射的实现过程和作用\">#</a> 10.Java 反射的实现过程和作用</h2>\n<p><strong>实现过程</strong>：Java 语言编译完之后会生成一个.class 文件，反射就是通过字节码找到一个类和 类中的方法和属性等。<br>\n<strong>作用</strong>：反射机制就是指程序运行过程中可以获取自身的信息。在 Java 中 只要知道类的名字就可以通过反射机制找到类的所有信息。</p>\n<h2 id=\"11请问error和exception有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#11请问error和exception有什么区别\">#</a> 11. 请问 error 和 exception 有什么区别？</h2>\n<p>error 表示恢复不是不可能但十分困难的一种严重问题，例如，内存溢出。<br>\nexception 表示一种设计或实现问题。表示，如果程序正常运行，就从不会发生的情况。</p>\n<h2 id=\"12ajax中get-和-post的区别\"><a class=\"markdownIt-Anchor\" href=\"#12ajax中get-和-post的区别\">#</a> 12.AJAX 中 get 和 post 的区别。</h2>\n<p>get 传输 把数据添加到 url 中发送。get 传输简单数据，数据大小在 1kb 以下。get 传输的数据会被浏览器缓存下来。<br>\npost 传输 把各表单数据及元素作为 HTML 的消息实体内容传递给 web 服务器。post 没有长度限制。</p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://example.com/2022/06/28/Spring%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87/",
            "url": "http://example.com/2022/06/28/Spring%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AF%87/",
            "title": "Spring基础概念篇",
            "date_published": "2022-06-28T07:40:21.000Z",
            "content_html": "<h2 id=\"1什么是spring\"><a class=\"markdownIt-Anchor\" href=\"#1什么是spring\">#</a> 1. 什么是 Spring</h2>\n<p>容器框架：可以管理所有的组件（类）</p>\n<h2 id=\"2ioc-和-aop\"><a class=\"markdownIt-Anchor\" href=\"#2ioc-和-aop\">#</a> 2.IOC 和 AOP</h2>\n<p><strong>IOC</strong>：也叫控制反转，是一种设计思想，将原本程序中手动创建对象的控制权交给 Sping 框架来管理。IOC 容器是 Sping 用来实现 IOC 的载体，IOC 容器实际上就是个 MAP，MAP 中存放各种对象。IOC 容器就像是一个工厂，当我们需要创建一个对象时，只需要配置好配置文件、注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<p><strong>AOP</strong>: 面向切面编程，将那些与业务无关，却为业务模块所共同调用的逻辑或泽恩封装起来，便于减少系统重复代码，降低耦合性，有利于未来的扩展和可维护性。</p>\n<h2 id=\"3springmvc执行流程\"><a class=\"markdownIt-Anchor\" href=\"#3springmvc执行流程\">#</a> 3.springMVC 执行流程。</h2>\n<p>1. 用户发送请求，这个请求会先到 dispatcherServlet (中央控制器)。</p>\n<p>2. 中央控制器接受请求调用 handlerMappers（处理器映射器），并由此知道该请求由哪个 controller 处理 。</p>\n<p>3. 中央控制器调用 HandlerAdapter （处理器适配器），告诉中央控制器应该要去执行哪个 controller。</p>\n<p>4. 前端控制器调用 HandlerAdapter,HandlerAdapter 经过适配器调用具体的 controller。</p>\n<p>5.controller 执行完返回 modelAndView（视图和数据），并层层返回给中央控制器。</p>\n<p>6. 中央适配器把 modelAadView 交给 viewReslover (视图解析器)，然后返回真正的视图。</p>\n<p>7. 前端控制器将数据模型填充到视图中。</p>\n<p>8. 前端控制器将响应结果返回给用户。</p>\n",
            "tags": [
                "spring"
            ]
        },
        {
            "id": "http://example.com/2022/06/28/Mysql%E4%BA%8B%E5%8A%A1%E7%AF%87/",
            "url": "http://example.com/2022/06/28/Mysql%E4%BA%8B%E5%8A%A1%E7%AF%87/",
            "title": "Mysql事务篇",
            "date_published": "2022-06-28T06:41:16.000Z",
            "content_html": "",
            "tags": [
                "Mysql"
            ]
        }
    ]
}