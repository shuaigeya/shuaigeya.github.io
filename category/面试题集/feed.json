{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"面试题集\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/07/15/java%E5%9F%BA%E7%A1%80%E7%AF%87%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2022/07/15/java%E5%9F%BA%E7%A1%80%E7%AF%87%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "java基础篇面试题",
            "date_published": "2022-07-15T05:06:11.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> java</h1>\n<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"面向对象的特征\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的特征\">#</a> 面向对象的特征</h3>\n<p><strong>继承，封装，多态。</strong><br>\n<strong>封装</strong>：将对象的实现细节隐藏起来，然后通过公共方法暴露出该对象的功能。<br>\n<strong>继承</strong>：实现软件复用。子类继承父类后可以直接或间接地使用父类的成员。<br>\n<strong>多态</strong>：同一个行为具有不同的表现形式。</p>\n<h3 id=\"java中覆盖和重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#java中覆盖和重载的区别\">#</a> JAVA 中覆盖和重载的区别</h3>\n<p><strong>覆盖</strong>：子类对父类方法的一种重写。返回值，方法名，参数列表必须相同。访问权限大于等于父类。抛出的异常要小于父类<br>\n<strong>重载</strong>：在一个类中可以有多个重名的方法，根据 参数个数不同，参数类型不同，参数顺序不同  而构成重载。</p>\n<h3 id=\"抽象类和接口的区别\"><a class=\"markdownIt-Anchor\" href=\"#抽象类和接口的区别\">#</a> 抽象类和接口的区别</h3>\n<p>1 .  抽象类可以没有抽象方法，但接口中的方法必须是抽象的。<br>\n2 . 抽象类只能被一个类继承，而接口可以继承多个父接口。<br>\n3 . 抽象类可以有普通成员变量，但 接口中的变量必须被初始化，接口中只有常量没有变量。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/47fb42cf20bd4883a3e1222f2bf6eae8.jpeg#pic_center\" alt=\"在这里插入图片描述\"><br>\n怎么选择接口和抽象类：如果要创建一个不带任何方法和成员变量的基类则选择接口，否则选择抽象类。</p>\n<h3 id=\"java中常用的包\"><a class=\"markdownIt-Anchor\" href=\"#java中常用的包\">#</a> Java 中常用的包</h3>\n<p>Java.lang  java.util  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuaW8=\">java.io</span>  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuaW8=\">java.io</span>  <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEubmV0\">java.net</span>  java.sql</p>\n<h3 id=\"java-是值传递还是引用传递\"><a class=\"markdownIt-Anchor\" href=\"#java-是值传递还是引用传递\">#</a> Java 是值传递还是引用传递？</h3>\n<p>Java 是值传递的，当我们调用需要传参的函数时，传递过去的参数是它的副本而不是它本身<br>\n<img data-src=\"https://img-blog.csdnimg.cn/b9f8506f3bcd4c168d64ef20c602da87.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"static-关键字的含义\"><a class=\"markdownIt-Anchor\" href=\"#static-关键字的含义\">#</a> static 关键字的含义？</h3>\n<p>被 static 修饰的成员变量或方法可以直接通过类名调用。静态块在编译时被调用。</p>\n<h3 id=\"i-和-i的不同之处\"><a class=\"markdownIt-Anchor\" href=\"#i-和-i的不同之处\">#</a> i++ 和 ++i 的不同之处？</h3>\n<ol>\n<li>两者在运算之前都会把变量值 + 1。</li>\n<li>后置 ++ 会将变量赋值给一个临时变量，接下来对临时变量 + 1，然后用临时变量进行运算。</li>\n<li><strong>b = ++a</strong>  , 先自增，再赋值，b 值为 a 自增后的值。<strong>b = a++</strong>  , 先赋值，再自增，b 值为 a 自增前的值。</li>\n</ol>\n<h3 id=\"string-stringbuffer-stringbuilder-的区别\"><a class=\"markdownIt-Anchor\" href=\"#string-stringbuffer-stringbuilder-的区别\">#</a> String , StringBuffer ,StringBuilder 的区别。</h3>\n<ul>\n<li><strong>String</strong> : 不可变，线程安全。用 final 修饰，相当于常量，所以线程安全。</li>\n<li><strong>StringBuffer</strong> : 可变，线程安全。加了同步锁，所以线程安全。</li>\n<li><strong>StringBuilder</strong> ：可变，线程不安全。未加同步锁，所以线程不安全。</li>\n</ul>\n<h3 id=\"truefalse-与-null是关键字吗\"><a class=\"markdownIt-Anchor\" href=\"#truefalse-与-null是关键字吗\">#</a> true，false 与 null 是关键字吗？</h3>\n<p>true false 是布尔类型的字面常量，null 是引用类型的字面常量。</p>\n<h3 id=\"java内存分布\"><a class=\"markdownIt-Anchor\" href=\"#java内存分布\">#</a> Java 内存分布</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/66b3b7ba39a94249957f043224b6bbd2.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><strong>栈</strong>：一般存基础数据类型的值和对象以及基础数据类型的引用。</li>\n<li><strong>堆</strong>：存储创建好的对象和数组，jvm 只有一个堆，被所有的线程共享。</li>\n<li><strong>方法区</strong>：jvm 只有一个方法区，被所有线程共享。用于存储常量和存储类。</li>\n</ul>\n<h3 id=\"equlse-和-的区别\"><a class=\"markdownIt-Anchor\" href=\"#equlse-和-的区别\">#</a> equlse () 和 == 的区别</h3>\n<ul>\n<li><strong>==</strong> 对于基本数据类型，比较的是值。对于引用数据，比较的是对象的地址。不管是基本数据类型还是引用数据类型 ，<strong>==</strong> 本质上还是比较值，只是引用数据类型存放的是地址。</li>\n<li><strong>equlse</strong> () 存在于<strong> object</strong> 类中，<strong>object</strong> 是所有类的直接或间接父类。对象未重写<strong> equlse</strong> () ，等价于 <strong>==</strong>。对象重写了 <strong>equlse</strong> () ，比较的是对象的属性是否相等。</li>\n</ul>\n<h3 id=\"java反射的实现过程和作用\"><a class=\"markdownIt-Anchor\" href=\"#java反射的实现过程和作用\">#</a> Java 反射的实现过程和作用</h3>\n<p><strong>实现过程</strong>：Java 语言编译完之后会生成一个.class 文件，反射就是通过字节码找到一个类和 类中的方法和属性等。<br>\n<strong>作用</strong>：反射机制就是指程序运行过程中可以获取自身的信息。在 Java 中 只要知道类的名字就可以通过反射机制找到类的所有信息。</p>\n<h3 id=\"请问error和exception有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#请问error和exception有什么区别\">#</a> 请问 error 和 exception 有什么区别？</h3>\n<p>error 表示恢复不是不可能但十分困难的一种严重问题，例如，内存溢出。<br>\nexception 表示一种设计或实现问题。表示，如果程序正常运行，就从不会发生的情况。</p>\n<h3 id=\"ajax中get-和-post的区别\"><a class=\"markdownIt-Anchor\" href=\"#ajax中get-和-post的区别\">#</a> AJAX 中 get 和 post 的区别。</h3>\n<p>get 传输 把数据添加到 url 中发送。get 传输简单数据，数据大小在 1kb 以下。get 传输的数据会被浏览器缓存下来。<br>\npost 传输 把各表单数据及元素作为 HTML 的消息实体内容传递给 web 服务器。post 没有长度限制。</p>\n<h2 id=\"集合容器\"><a class=\"markdownIt-Anchor\" href=\"#集合容器\">#</a> 集合容器</h2>\n<blockquote>\n<p>集合中不能直接存储数据类型和对象，存的是它们的内存地址。集合在 Java 中本身就是一个容器，是一个对象。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/3c7c28ad47e84ae59225b98b868b0a3a.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> List</h3>\n<blockquote>\n<p>有序可重复，查询慢，增删快。集合中每个元素都有其对应的顺序索引。</p>\n</blockquote>\n<h4 id=\"arraylist\"><a class=\"markdownIt-Anchor\" href=\"#arraylist\">#</a> ArrayList</h4>\n<ul>\n<li>\n<p>有序可重复，查询慢，增删快，线程不安全，有序。</p>\n</li>\n<li>\n<p>底层是一个动态数组，有一个初始的容量值为 10. 当内存快溢出时就会进行扩容操作。若已知要添加数据的数量可先指定容量，可减少频繁扩容而带来的内存消耗。</p>\n</li>\n</ul>\n<h4 id=\"linkedlist\"><a class=\"markdownIt-Anchor\" href=\"#linkedlist\">#</a> LinkedList</h4>\n<ul>\n<li>查询慢，增删快，线程不安全，可存储重复数据。</li>\n<li>底层是双向链表。</li>\n</ul>\n<h4 id=\"vectro\"><a class=\"markdownIt-Anchor\" href=\"#vectro\">#</a> Vectro</h4>\n<ul>\n<li>查询快，增删慢，线程安全，可存储重复数据。</li>\n<li>底层是数组。</li>\n</ul>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h3>\n<blockquote>\n<p>无序，不可重复，线程不安全，查询快，增删慢</p>\n</blockquote>\n<h4 id=\"hashset\"><a class=\"markdownIt-Anchor\" href=\"#hashset\">#</a> HashSet</h4>\n<ul>\n<li>无序，不可重复，线程不安全。</li>\n<li>底层数据采用哈希表，可添加 null 元素。</li>\n<li>元素的唯一性是由是否重写 hashCode 和 equals 来实现的，若没重写这两个函数，无法保证元素的唯一性。</li>\n</ul>\n<h4 id=\"linkedhashset\"><a class=\"markdownIt-Anchor\" href=\"#linkedhashset\">#</a> LinkedHashSet</h4>\n<ul>\n<li>有序，不可重复。</li>\n<li>底层采用链表和哈希表共同实现，链表保证元素的顺序和存储顺序一致，哈希表保证了数据的唯一，线程不安全</li>\n</ul>\n<h4 id=\"treeset\"><a class=\"markdownIt-Anchor\" href=\"#treeset\">#</a> TreeSet</h4>\n<ul>\n<li>底层采用二叉树，元素唯一且排好序</li>\n</ul>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h3>\n<blockquote>\n<p>map 是由键值对的形式存在的，键不可以重复，但值可以重复。</p>\n</blockquote>\n<h4 id=\"hashmap\"><a class=\"markdownIt-Anchor\" href=\"#hashmap\">#</a> HashMap</h4>\n<ul>\n<li><strong>key</strong> 不可重复，<strong>value</strong> 可重复。<strong>key</strong> 可以为<strong> null</strong>，只允许有一个，<strong>value</strong> 可以存多个<strong> null</strong>。</li>\n</ul>\n<h2 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\">#</a> 并发编程</h2>\n<h3 id=\"什么是进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#什么是进程和线程\">#</a> 什么是进程和线程</h3>\n<p><strong>进程</strong>：进程是程序的一次创建、运行、销毁的过程。<br>\n<strong>线程</strong>：一个进程可以有多个线程，他们共享这个进程中的资源。在<strong> Java</strong> 中，所有线程共享<strong>堆</strong>和<strong>方法区</strong>的资源。</p>\n<h3 id=\"线程的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#线程的生命周期\">#</a> 线程的生命周期</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/189aa14e0bfb45f28df9959129d099cb.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>新建：</li>\n<li>就绪：</li>\n<li>运行：</li>\n<li>阻塞：</li>\n<li>死亡：</li>\n</ul>\n<h4 id=\"java创建线程的三种方法\"><a class=\"markdownIt-Anchor\" href=\"#java创建线程的三种方法\">#</a> Java 创建线程的三种方法</h4>\n<ol>\n<li>继承 Thread 类，重写 run () 方法。</li>\n<li>实现 Runnable 接口，重写 run () 方法。</li>\n<li>实现 Callable 接口，重写 run () 方法。</li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://example.com/2022/06/29/myBatis-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2022/06/29/myBatis-%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "myBatis 面试题",
            "date_published": "2022-06-29T04:27:11.000Z",
            "content_html": "<p>Mybatis 中文网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLm5ldC5jbi8=\">请戳此</span></p>\n<h2 id=\"mybatis-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mybatis-缓存\">#</a> MyBatis 缓存</h2>\n<p><strong>缓存</strong>：暂存一些数据，加快系统查询速度。</p>\n<p><strong>Mybatis 缓存机制</strong>：本质是一个<strong> Map</strong>, 能保存一些数据。</p>\n<p><strong>一级缓存</strong>：线程级别的缓存。也称本地缓存或<strong> sqlSession</strong> 级别的缓存。（和数据库的一次会话就有一次一级缓存）</p>\n<p><strong>二级缓存</strong>：全局范围的缓存。（除了当前线程和<strong> SqlSession</strong> 能用外，其他的都能用）</p>\n<h3 id=\"一级缓存\"><a class=\"markdownIt-Anchor\" href=\"#一级缓存\">#</a> 一级缓存</h3>\n<p>只要之前查询过的数据，<strong>MyBatis</strong> 都会保存在缓存中，下次获取这些数据，都会直接在缓存中拿。</p>\n<blockquote>\n<p>注：<strong>SpringBoot + Mybatis 一级缓存会失效</strong>。原因是经过 Spring 的处理，每次查询完成后，都会关闭<strong> sqlSession</strong>，而一级缓存是<strong> sqlSession</strong> 级别的缓存。</p>\n</blockquote>\n<h4 id=\"缓存失效的几种情况\"><a class=\"markdownIt-Anchor\" href=\"#缓存失效的几种情况\">#</a> 缓存失效的几种情况</h4>\n<ol>\n<li>不同的 <strong>sqlSession</strong> ，同一级的缓存。</li>\n<li>同一个方法，不同的参数。</li>\n<li>在同一个<strong> sqlSession</strong> 期间执行过任何一次增删改操作。</li>\n<li>手动清空了缓存。</li>\n</ol>\n<h3 id=\"二级缓存\"><a class=\"markdownIt-Anchor\" href=\"#二级缓存\">#</a> 二级缓存</h3>\n<blockquote>\n<p>二级缓存没有，就去看一级缓存，一级缓存没有，就去读数据库。<br>\n关闭 <strong>sqlSession</strong> 会把一级缓存数据放在二级缓存中。</p>\n</blockquote>\n<h2 id=\"mybatis-动态标签\"><a class=\"markdownIt-Anchor\" href=\"#mybatis-动态标签\">#</a> MyBatis 动态标签</h2>\n<blockquote>\n<p><strong>if、where、trim、set、foreach、collection、choose、sql、include、bing</strong></p>\n</blockquote>\n<h3 id=\"if-类似java中单分支-if-判断\"><a class=\"markdownIt-Anchor\" href=\"#if-类似java中单分支-if-判断\">#</a> if : 类似 java 中单分支  if  判断</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">*</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\ttbl_navigation a</span><br><span class=\"line\">WHERE</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.navigationId!=null and obj.navigationId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    a.column_type = #&#123;obj.navigationId&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.id!=null and obj.id!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    a.column_type = #&#123;obj.id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"choose-when-otherwise\"><a class=\"markdownIt-Anchor\" href=\"#choose-when-otherwise\">#</a> choose、when、otherwise</h3>\n<blockquote>\n<p><strong>类似 Java 的 if-else。</strong><br>\n1. 当 title 不为空， 选择 title。<br>\n2. 当 content 不为空，title 为空，选择 content 。<br>\n3. 当 content 和 title 都为空，选择 otherwise。<br>\n4. 当 content 和 title 都为不为空，选择 title。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tbl_column</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">choose</span> &gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;obj.title != null&quot;</span>&gt;</span></span><br><span class=\"line\">                 and title like #&#123;obj.title&#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;content != null&quot;</span>&gt;</span></span><br><span class=\"line\">                 and content like #&#123;obj.content&#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">                 and delete = 1</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"trim-where-set\"><a class=\"markdownIt-Anchor\" href=\"#trim-where-set\">#</a> trim、where、set</h3>\n<blockquote>\n<p><strong>where</strong>: 替换 sql 语句中的 where。只有当子元素有任何返回的情况，才会拼接 where。当子元素 以 or 或 and 开头 会去除。<br>\n<strong>trim</strong>: 可以去除 or 和 and，在语句中拼接前缀或后缀。<br>\n<strong>set</strong>: 替换 sql 语句中的 set。动态在行首添加 set 删除子元素首行逗号。</p>\n</blockquote>\n<h3 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"#foreach\">#</a> foreach</h3>\n<blockquote>\n<p>类似 java 中的 foreach。<br>\n<strong>collection：collection</strong> 集合，可以为 List,Set,Map。<br>\n<strong>item</strong>： 每次遍历，index 对应的 对象。<br>\n<strong>index</strong>： 当前数组的下标<br>\n<strong> open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</strong> ：循环开始前加 ‘(’，循环结束后加 ‘)’。循环过程中，每次循环结束后加，。</p>\n</blockquote>\n<p>以下为官网案例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectPostIn&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class=\"line\">  SELECT *</span><br><span class=\"line\">  FROM POST P</span><br><span class=\"line\">  WHERE ID in</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;item&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n",
            "tags": [
                "mybatis"
            ]
        }
    ]
}